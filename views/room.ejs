<script src="/socket.io/socket.io.js"></script> <!-- Socket.IO -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/addon/edit/closebrackets.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/theme/dracula.min.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/clike/clike.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/javascript/javascript.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/python/python.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/java/java.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/peerjs@1.3.1/dist/peerjs.min.js"></script>

<h2>Welcome to <%= locals.roomName %> room</h2>
<h3>Created By: <%= locals.createdBy %>
</h3>

<p>Share this code with your friends to join: <%= locals.roomCode %></p>



<div class="mainroom-content">
    <div class="main-room">
        <div class="code-editor">
            <div class="action-bar">
                <img height="24" width="24" src="/img/Code.png" alt="">
                <div class="col-12 w-25">
                    <label class="visually-hidden" for="inlineFormCustomSelect">Language Preference</label>
                    <select class="form-select mr-sm-2" id="inlineFormCustomSelect">
                        <option selected>Choose...</option>
                        <option value="Java">Java</option>
                        <option value="Cpp">C++</option>
                        <option value="Python">Python</option>
                    </select>
                </div>
                <div>
                    <button id="run" class="btn-success">Run Code <i class="bi bi-play-fill"></i></button>
                </div>
            </div>
            <textarea id="editor" class="form-control rounded" aria-label="Code editor"
                style="cursor: text;"></textarea>
        </div>
        <div class="inandout">
            <div class="result">
                <label for="Input" class="text-light mt-4 mb-2">
                    <h4>Input</h4>
                </label>
                <textarea type="text" id="input" class="form-control h-75"></textarea>
            </div>
            <div class="result">
                <label for="Output" class="text-light mt-2 mb-2">
                    <h4>Output</h4>
                </label>
                <textarea type="text" id="output" class="form-control h-75"></textarea>
            </div>
        </div>
    </div>
    <div class="voice-call">
        <div id="container">
            <img id="profile-pic" src="<%= locals.profileImage %>" alt="Profile Picture">
            <canvas id="waveCanvas"></canvas>
        </div>
        <div>
            <button class="button" id="muteBtn">Mute</button>
        </div>
    </div>
</div>

<script>
    const socket = io();
    const peer = new Peer();

    let localStream;
    let isMuted = false;
    let analyser;
    let bufferLength;
    let dataArray;
    const waveCanvas = document.getElementById('waveCanvas');
    const waveCtx = waveCanvas.getContext('2d');

    // Get user media (audio only)
    navigator.mediaDevices.getUserMedia({ audio: true })
        .then(stream => {
            const myAudio = document.createElement('audio');
            myAudio.srcObject = stream;
            document.body.appendChild(myAudio);
            localStream = stream;

            // Initialize audio visualizer
            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
            analyser = audioContext.createAnalyser();
            analyser.fftSize = 256;
            bufferLength = analyser.frequencyBinCount;
            dataArray = new Uint8Array(bufferLength);

            const source = audioContext.createMediaStreamSource(stream);
            source.connect(analyser);

            waveCanvas.width = 200;
            waveCanvas.height = 200;

            function drawWaveform() {
                requestAnimationFrame(drawWaveform);
                analyser.getByteFrequencyData(dataArray);

                waveCtx.clearRect(0, 0, waveCanvas.width, waveCanvas.height);
                waveCtx.fillStyle = 'rgba(53, 41, 219, 0.5)';
                waveCtx.lineWidth = 1;

                const centerX = waveCanvas.width / 2;
                const centerY = waveCanvas.height / 2;
                const radius = 120;
                const barWidth = Math.PI * 2 / bufferLength;

                for (let i = 0; i < bufferLength; i++) {
                    let barHeight = dataArray[i];
                    let angle = barWidth * i;

                    let x = centerX + radius * Math.cos(angle);
                    let y = centerY + radius * Math.sin(angle);
                    let barHeightNormalized = barHeight / 255 * radius;

                    waveCtx.beginPath();
                    waveCtx.moveTo(centerX, centerY);
                    waveCtx.lineTo(x, y);
                    waveCtx.lineTo(centerX + (barHeightNormalized) * Math.cos(angle + barWidth),
                        centerY + (barHeightNormalized) * Math.sin(angle + barWidth));
                    waveCtx.lineTo(centerX, centerY);
                    waveCtx.fill();
                }
            }

            drawWaveform();

            peer.on('call', call => {
                call.answer(stream);

                call.on('stream', remoteStream => {
                    const peerAudio = document.createElement('audio');
                    peerAudio.srcObject = remoteStream;
                    document.body.appendChild(peerAudio);
                });
            });
        })
        .catch(err => console.error('Error accessing media devices:', err));


    socket.emit("joinRoom", "<%= locals.roomId %>");


    const editor = CodeMirror.fromTextArea(document.getElementById("editor"), {
        mode: "text/x-c++src",
        theme: "dracula",
        lineNumbers: true, 
        autoCloseBrackets: true, 
    });

    editor.setSize("100%", "500px");

    let isUpdating = false;

    editor.on("change", function () {
        if (!isUpdating) {
            socket.emit("codeChange", {
                roomId: "<%= locals.roomId %>",
                code: editor.getValue(),
            });
        }
    });

    socket.on("codeUpdate", function (data) {
        if (data.roomId === "<%= locals.roomId %>") {
            isUpdating = true;
            editor.setValue(data.code);
            isUpdating = false;
        }
    });

    function copyToClipboard(text) {
        navigator.clipboard.writeText(text).then(() => {
            alert("Link copied to clipboard!");
        });
    }

    const option = document.getElementById("inlineFormCustomSelect");
    option.addEventListener("change", () => {
        if (option.value == "Java") {
            editor.setOption("mode", "text/x-java");
        } else if (option.value == "Python") {
            editor.setOption("mode", "text/x-python");
        } else {
            editor.setOption("mode", "text/x-c++src");
        }
    });

    const input = document.getElementById("input");
    const output = document.getElementById("output");
    const run = document.getElementById("run");
    let code;
    run.addEventListener("click", async () => {
        code = {
            code: editor.getValue(),
            input: input.value,
            lang: option.value,
        };
        const response = await fetch("http://localhost:8000/compile", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(code),
        });

        const result = await response.json();
        output.value = result.output;
    });

    document.getElementById('muteBtn').addEventListener('click', () => {
        isMuted = !isMuted;

        if (isMuted) {
            localStream.getTracks().forEach(track => {
                if (track.kind === 'audio') {
                    track.enabled = false;
                }
            });
            document.getElementById('muteBtn').innerText = 'Unmute';
        } else {
            localStream.getTracks().forEach(track => {
                if (track.kind === 'audio') {
                    track.enabled = true;
                }
            });
            document.getElementById('muteBtn').innerText = 'Mute';
        }
    });

    socket.on("disconnect", () => {
        console.log("User disconnected");
        peer.destroy();
    });

</script>